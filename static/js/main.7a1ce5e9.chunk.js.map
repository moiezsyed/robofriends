{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/Searchbox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","props","name","email","website","id","className","src","alt","CardList","filteredRobot","map","robot","index","Searchbox","change","type","placeholder","onChange","Scroll","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","App","onSearchChange","event","searchfield","target","value","console","log","robots","fetch","response","status","json","users","filter","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gMAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,2CCaCQ,EAlBF,SAACC,GAGV,IAAOC,EAA4BD,EAA5BC,KAAMC,EAAsBF,EAAtBE,MAAOC,EAAeH,EAAfG,QAASC,EAAMJ,EAANI,GAC7B,OAEI,cADA,CACA,OAAKC,UAAU,mIAAf,UACI,qBAAKC,IAAG,+BAA0BF,GAAMG,IAAI,UAC5C,gCAEI,6BAAKN,IACL,4BAAIC,IACJ,4BAAIC,WCYLK,EAtBE,SAAC,GAed,OAfkC,EAAnBC,cAQqBC,KAAI,SAACC,EAAOC,GAG5C,OAAQ,cAAC,EAAD,CAAkBX,KAAMU,EAAMV,KAAMC,MAAOS,EAAMT,MAAOC,QAASQ,EAAMR,QAC/EC,GAAIO,EAAMP,IADSQ,OCHZC,EAVG,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAChB,OACI,qBAAKT,UAAU,UAAf,SAGI,uBAAOA,UAAU,oBAAoBU,KAAK,SAASC,YAAY,sBAAsBC,SAAUH,OCM5FI,EAXA,SAAClB,GAEZ,OAGQ,aAFJ,CAEI,OAAKmB,MAAO,CAACC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,SAApE,SACKtB,EAAMuB,YCkBRC,E,kDAtBX,WAAYxB,GAAO,IAAD,8BACd,cAAMA,IACDyB,MAAQ,CACTC,UAAU,GAHA,E,qDAQlB,SAAkBC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,oBAG7B,WACI,OAGIG,KAAKJ,MAAMC,SAAW,8DAAwCG,KAAK7B,MAAMuB,a,GAlBzDQ,IAAMC,WC6EnBC,G,wDAhEX,aAAe,IAAD,8BAEV,gBAWJC,eAAiB,SAACC,GAEd,EAAKL,SAAS,CAAEM,YAAaD,EAAME,OAAOC,QAC1CC,QAAQC,IAAIL,EAAME,OAAOC,QAZzB,EAAKb,MAAQ,CACTgB,OAAQ,GACRL,YAAa,IANP,E,qDAmBd,WAAqB,IAAD,OAEhBM,MAAM,8CAEDjD,MAAK,SAAAkD,GAGF,OADAJ,QAAQC,IAAIG,EAASC,QACdD,EAASE,UAInBpD,MAAK,SAAAqD,GACF,EAAKhB,SAAS,CAAEW,OAAQK,S,oBAIpC,WAAU,IAAD,OAGCrC,EAAgBoB,KAAKJ,MAAMgB,OAAOM,QAAO,SAACpC,GAI5C,OAAOA,EAAMV,KAAK+C,cAAcC,SAAS,EAAKxB,MAAMW,YAAYY,kBAIpE,OAAiC,IAA7BnB,KAAKJ,MAAMgB,OAAOS,OACX,oBAAI7C,UAAU,oBAAd,wBAGH,sBAAKA,UAAU,KAAf,UACI,oBAAIA,UAAU,iBAAd,0BACA,cAAC,EAAD,CAAWS,OAAQe,KAAKK,iBACxB,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAUzB,cAAeA,e,GAxDnCsB,IAAMC,YCAxBmB,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM1BjE,M","file":"static/js/main.7a1ce5e9.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\n\nconst Card = (props) => {\n    // destructuring props, which is a JSX object containing name, email, hobby & id properties\n    // props gives us all the properties used in the component\n    const {name, email, website, id} = props;\n    return (\n        // \"dib\" tachyon property is used to get the items inline, i.e. on one line\n        <div className=\"bg-dark-purple ba b--transparent br3 grow ma2 measure tc pa3 small-caps calisto light-green hover-black shadow-hover contain dib\">\n            <img src={`https://robohash.org/${id}`} alt=\"robot\"></img>\n            <div>\n                {/* every time Card component is called in the \"index.js\" file, it's properties(props) will be read and used here */}\n                <h2>{name}</h2>\n                <p>{email}</p>\n                <p>{website}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;","import React from \"react\"\nimport Card from \"./Card\"\n\n// NOTE: could indirectly destructure our \"robots\" prop inside the function using \"props.robots\"\nconst CardList = ({filteredRobot}) => {\n\n    // // creating an error to check the \"ErrorBoundary\" component\n    // if (true){\n    //     throw new Error(\"NOOOOOOOOOOOOO!\");\n    // }\n\n    // use map method to loop over robots array (could also use forEach method)\n    const cardComponent = filteredRobot.map((robot, index) => {\n        // Card Component is called here (necessary to give exact names of props as used in the \"Card\" component)\n        // \"key\" prop here is needed so that the virtual DOM recognizes each individual Card component from the other; without the \"key\" prop, the developer tool gives an error, and virtual DOM would have to erase everything if a Card component is deleted\n        return (<Card key={index} name={robot.name} email={robot.email} website={robot.website} \n        id={robot.id} /> );\n    })\n    \n    return(\n        // only one return statement, so we don't need <div></div>\n        // if wrapped in <div></div>, then we need to wrap cardComponent in curly braces, as JS object\n        cardComponent\n    );\n}\n\nexport default CardList;","import React from \"react\"\n\nconst Searchbox = ({change}) => {\n    return (\n        <div className=\"pa1 ma2\">\n            {/* https://upmostly.com/tutorials/react-onchange-events-with-examples */}\n            {/* onChange takes as input the event with all the events data such as name, value etc. */}\n            <input className=\"bg-green pa2 grow\" type=\"search\" placeholder=\"enter robot name...\" onChange={change}/>\n        </div>\n    );\n}\n\nexport default Searchbox;","import React from \"react\";\n\nconst Scroll = (props) => {\n    // return the \"CardList\" component as \"Scroll\" wraps the \"CardList\" component\n    return (\n        // if we want to add styling directly in JSX, we need to use the attribute \"style\" and use twwo curly braces to access the object\n        // without the height property, the scroll bar won't scroll/follow along\n            <div style={{overflow: \"scroll\", border: \"5px solid black\", height: \"800px\"}}>\n                {props.children}\n            </div>\n        );\n}\n\nexport default Scroll;","import React from \"react\"\n\nclass ErrorBoundary extends React.Component{\n    // we're passing in \"props\" to the constructor of this class, so that we could use the props in here\n    constructor(props){\n        super(props)\n        this.state = {\n            hasError: false\n        }\n    }\n\n    // error handling lifecycle hook\n    componentDidCatch(error, info){\n        this.setState({hasError: true})\n    }\n\n    render() {\n        return(\n            // the error will be displayed, but not in developer mode; only to the user screen\n            // in developer mode, it will be only shown for a split second\n            this.state.hasError ? <h1> Ooooopppps, I did it again!</h1> : this.props.children \n        );\n    }\n}\n\n\nexport default ErrorBoundary;","// Main Component (parent)\n\n// notice here that we didn't mention \"CardList.js\"; because by default files without extensions are assumed to be JS files\nimport React from \"react\"\nimport CardList from \"../components/CardList\"\nimport Searchbox from \"../components/Searchbox\"\nimport Scroll from \"../components/Scroll\"\nimport ErrorBoundary from \"../components/ErrorBoundary\"\nimport \"../containers/App.css\"\n\n// created class \"App\", which is parent class to all other component\n// classes that have state are known as \"smart components\"\n// all other classes, in this case \"Searchbox\" and \"CardList\" communicate through this parent class\n// \"App\" has states, which define our React code and are passed along to the child components as \"props\", i.e. all states can be used as props. It's like a binary tree structure, with the parent class (\"App\") being the root node\nclass App extends React.Component {\n    constructor() {\n        // takes in the constructor from the React.component class\n        super()\n        // describing the state of our React code (always done in the parent class, so the children can use it)\n        this.state = {\n            robots: [],\n            searchfield: ''\n        };\n    };\n\n    // onChange is an event handler; where the events are input to the handler by means of a class method in this case\n    // in this case the event is to listen to the keyboard changes from the user; used in the \"Searchbox\" component using \"onChange\" attribute\n    // always create methods in classes using the \"arrow function\" to avoid unnecesssary errors, except pre-defined React methods\n    onSearchChange = (event) => {\n        // setState changes the current state of the event to the new state that the user inputs\n        this.setState({ searchfield: event.target.value })\n        console.log(event.target.value);\n    };\n\n    componentDidMount() {\n        // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\n            // we have to return the response in json format & the response is returned only when the \"promise\" is fulfilled\n            .then(response => {\n                // additional command to check for HTTP errors if any\n                console.log(response.status);\n                return response.json();\n            })\n            // we're getting users from the API by updating the state to the users from the API\n            // if this is not done, we don't get the users\n            .then(users => {\n                this.setState({ robots: users })\n            });\n    }\n\n    render() {\n        // filter out the robots when searched for their names\n        // this function links the two components\n        const filteredRobot = this.state.robots.filter((robot) => {\n            // when returns true, it will return that robot details\n            // https://www.w3schools.com/jsref/jsref_includes.asp\n            // https://www.w3schools.com/jsref/jsref_tolowercase.asp\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n        });\n\n        // if-clause is used in the case it takes a while to fetch the response from the API\n        if (this.state.robots.length === 0){\n            return <h1 className=\"f1 light-green tc\">Loading...</h1>\n        } else {\n            return (\n                <div className=\"tc\">\n                    <h1 className=\"f1 light-green\"> RoboFriends</h1>\n                    <Searchbox change={this.onSearchChange} />\n                    <Scroll>\n                        <ErrorBoundary>\n                            <CardList filteredRobot={filteredRobot} />\n                        </ErrorBoundary>\n                    </Scroll>\n                </div>\n            );\n        }\n    }\n}\n\nexport default App;\n\n","// Main JS script (entry file for our app; first thing read)\n// NPM packages should be defined inside the main JS file\n// Components are capitalized; convention\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons'\nimport App from \"./containers/App\"\n\n// <App /> is just a react COMPONENT\n// This can be changed to input any HTML element or component\n// Components can have their own \"props\" i.e. properties defined here and accessed in it's JS file\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}